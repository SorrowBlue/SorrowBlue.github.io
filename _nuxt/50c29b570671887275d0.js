(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{366:function(n,e,t){var content=t(385);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(10).default)("652897a0",content,!0,{sourceMap:!1})},380:function(n,e,t){var map={"./2019-07-10_android-gradle-kts.json":381,"./2019-07-23_non-null-livedata.json":382,"./2019-07-29_markdown-cheat-sheet.json":383};function l(n){var e=o(n);return t(e)}function o(n){if(!t.o(map,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return map[n]}l.keys=function(){return Object.keys(map)},l.resolve=o,n.exports=l,l.id=380},381:function(n){n.exports=JSON.parse('{"title":"Android build.gradle.ktsのすゝめ","desc":"Android build.gradle.ktsのすゝめ","date":"2019/07/10","tags":"Android Kotlin","bodyContent":"# Android: build.gradle.kts のすゝめ\\n\\n[Github](https://github.com/SorrowBlue/AndroidGradleKts)\\n[![Build Status](https://travis-ci.com/SorrowBlue/sorrowblue.github.io.svg?token=69SwqJzT2mqgmiiajAiQ&branch=gh-pages)](https://travis-ci.com/SorrowBlue/sorrowblue.github.io)\\n\\n## 環境\\n\\n|         tool          |   version    |\\n| :-------------------: | :----------: |\\n|        Gradle         |    5.4.1     |\\n|        Kotlin         |    1.3.41    |\\n|    Android Studio     |  3.5 Beta 5  |\\n| Android Gradle Plugin | 3.5.0-beta05 |\\n\\n## 既存のプロジェクトへの導入\\n\\n1. 設定の変更\\n   `ファイル - 設定 - 言語＆フレームワーク - Kotlin - Kotlinスクリプト`\\n   ファイル変更時にスクリプト依存関係を再ロードする にチェックする  \\n   ![build_src](/images/android-gradle-kts/settings_kotlin-script_reload.webp)\\n\\n2. プロジェクトルートに `buildSrc` を作成  \\n   ![build_src](/images/android-gradle-kts/build_src.webp)\\n\\n3. `buildSrc` に `build.gradle.kts` と `settings.gradle.kts` を作成  \\n   ![build-settings-gradle-kts](/images/android-gradle-kts/build-settings-gradle-kts.webp)\\n\\n4. `build.gradle.kts` に記述\\n\\n   ```kotlin\\n   plugins {\\n     `kotlin-dsl`\\n   }\\n   repositories {\\n         jcenter()\\n         google()\\n     }\\n     dependencies {\\n         implementation(\\"com.android.tools.build:gradle:3.5.0-beta05\\")\\n         implementation(\\"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41\\")\\n     }\\n   ```\\n\\n5. Sync now(今すぐ同期)  \\n   ![sync_now](/images/android-gradle-kts/sync_now.webp)\\n\\n6. プロジェクトルートの `settings.gradle` を `settings.gradle.kts` にリネーム  \\n   ![settings-gradle-kts](/images/android-gradle-kts/settings-gradle-kts.webp)\\n\\n7. `settings.gradle.kts` を編集\\n\\n```kotlin\\ninclude(\\":app\\")\\nrootProject.name = \\"My Application\\"\\n```\\n\\n8. プロジェクトルートの `build.gradle` を `build.gradle.kts` にリネーム\\n\\n9. `build.gradle.kts` を編集\\n\\n```kotlin\\nbuildscript {\\n    repositories {\\n        google()\\n        jcenter()\\n    }\\n    dependencies {\\n        classpath(\\"com.android.tools.build:gradle:3.5.0-beta05\\")\\n        classpath(\\"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41\\")\\n    }\\n}\\nallprojects {\\n    repositories {\\n        google()\\n        jcenter()\\n\\n    }\\n}\\ntask<Delete>(\\"clean\\") { delete(rootProject.buildDir) }\\n```\\n\\n10. `app/build.gradle` を `app/build.gradle.kts` にリネーム\\n\\n11. `app/build.gradle.kts` を編集\\n\\n```kotlin\\nplugins {\\n    id(\\"com.android.application\\")\\n    id(\\"kotlin-android\\")\\n    id(\\"kotlin-android-extensions\\")\\n}\\nandroid {\\n    compileSdkVersion(29)\\n    buildToolsVersion = \\"29.0.0\\"\\n    defaultConfig {\\n        applicationId = \\"com.sorrowblue.myapplication\\"\\n        minSdkVersion(23)\\n        targetSdkVersion(29)\\n        versionCode =1\\n        versionName =\\"1.0\\"\\n        testInstrumentationRunner = \\"androidx.test.runner.AndroidJUnitRunner\\"\\n    }\\n    buildTypes {\\n        getByName(\\"release\\") {\\n            isMinifyEnabled = false\\n            proguardFiles(getDefaultProguardFile(\\"proguard-android-optimize.txt\\"), \\"proguard-rules.pro\\")\\n        }\\n    }\\n}\\ndependencies {\\n    implementation(\\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.41\\")\\n    implementation(\\"androidx.appcompat:appcompat:1.0.2\\")\\n    implementation(\\"androidx.core:core-ktx:1.0.2\\")\\n    implementation(\\"androidx.constraintlayout:constraintlayout:1.1.3\\")\\n    testImplementation(\\"junit:junit:4.12\\")\\n    androidTestImplementation(\\"androidx.test.ext:junit:1.1.0\\")\\n    androidTestImplementation(\\"androidx.test.espresso:espresso-core:3.1.1\\")\\n}\\n```\\n\\n12. Sync now(今すぐ同期)\\n\\n## スマートに書く\\n\\n`getByName(\\"release\\")` このあたりを拡張関数で記述する\\n\\n`buildSrc/src/main/kotlin/Project.kt` を作成\\n\\n`Project.kt`\\n\\n```kotlin\\nimport com.android.build.gradle.internal.dsl.BuildType\\nimport org.gradle.api.NamedDomainObjectContainer\\nfun NamedDomainObjectContainer<BuildType>.release(body: BuildType.() -> Unit) {\\n    getByName(\\"release\\") { body(this) }\\n}\\n```\\n\\n`app/build.gradle.kts`\\n\\n```kotlin\\nrelease {\\n\\tisMinifyEnabled = false\\n\\tproguardFiles(getDefaultProguardFile(\\"proguard-android-optimize.txt\\"), \\"proguard-rules.pro\\")\\n}\\n```\\n\\n## 変数を定義\\n\\nもちろん変数も定義して使える\\n\\n`buildSrc/src/main/kotlin/Versions.kt`\\n\\n```kotlin\\nobject Versions {\\n\\tconst val kotlin = \\"1.3.41\\"\\n\\tconst val appcompat = \\"1.0.2\\"\\n\\tconst val `core-ktx` = \\"1.0.2\\"\\n\\tconst val constraintlayout = \\"1.1.3\\"\\n\\tconst val junit = \\"4.12\\"\\n    const val androidx_junit = \\"1.1.0\\"\\n    const val `espresso-core` = \\"3.1.1\\"\\n}\\n```\\n\\n`buildSrc/src/main/kotlin/Deps.kt`\\n\\n```kotlin\\nobject Deps {\\n\\tconst val `kotlin-stdlib-jdk7` = \\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${Versions.kotlin}\\"\\n\\tconst val appcompat = \\"androidx.appcompat:appcompat:${Versions.appcompat}\\"\\n    const val `core-ktx` = (\\"androidx.core:core-ktx:${Versions.`core-ktx`}\\")\\n    const val constraintlayout = \\"androidx.constraintlayout:constraintlayout:${Versions.constraintlayout}\\"\\n    const val junit = \\"junit:junit:${Versions.junit}\\"\\n    const val androidx_junit = \\"androidx.test.ext:junit:${Versions.androidx_junit}\\"\\n    const val `espresso-core` = \\"androidx.test.espresso:espresso-core:${Versions.`espresso-core`}\\"\\n}\\n```\\n\\n`app/build.gradle.kts`\\n\\n```kotlin\\ndependencies {\\n    implementation(Deps.`kotlin-stdlib-jdk7`)\\n    implementation(Deps.appcompat)\\n    implementation(Deps.`core-ktx`)\\n    implementation(Deps.constraintlayout)\\n    testImplementation(Deps.junit)\\n    androidTestImplementation(Deps.androidx_junit)\\n    androidTestImplementation(Deps.`espresso-core`)\\n}\\n```\\n\\n## Tips\\n\\n### 各モジュールの `minSdkVersion` `targetSdkVersion` などをまとめる\\n\\n`Project.kt`\\n\\n```kotlin\\nfun Project.module(action: LibraryExtension.() -> Unit) {\\n\\tafterEvaluate {\\n\\t\\tif (hasProperty(\\"android\\") && project.name != \\"app\\") {\\n\\t\\t\\taction(extensions.getByName(\\"android\\") as LibraryExtension)\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n`/build.gradle.kts`\\n\\n```kotlin\\nsubprojects {\\n\\tmodule {\\n\\t\\tcompileSdkVersion(COMPILE_SDK_VERSION)\\n\\t\\tdefaultConfig {\\n\\t\\t\\tminSdkVersion(MIN_SDK_VERSION)\\n\\t\\t\\ttargetSdkVersion(TARGET_SDK_VERSION)\\n\\t\\t\\tconsumerProguardFiles(`consumer-rules`)\\n\\t\\t\\ttestInstrumentationRunner = ANDROID_JUNIT_RUNNER\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### 任意の箇所で apply したいとき\\n\\n`/app/build.gradle.kts`\\n\\n```kotlin\\nplugins {\\n\\tid(\\"com.google.gms.google-services\\") apply false\\n}\\n/*..........processing..........*/\\napply(plugin = \\"com.google.gms.google-services\\")\\n```\\n\\n### プラグインを共通化したい\\n\\n`/build.gradle.kts`\\n\\n```kotlin\\nsubprojects {\\n\\tif (project.name == \\"app\\") {\\n\\t\\tapply(plugin = \\"com.android.application\\")\\n\\t} else {\\n\\t\\tapply(plugin = \\"com.android.library\\")\\n\\t}\\n\\tapply(plugin = \\"kotlin-android\\")\\n\\tapply(plugin = \\"kotlin-android-extensions\\")\\n}\\n```","bodyHtml":"<h1>Android: build.gradle.kts のすゝめ</h1>\\n<p><a href=\\"https://github.com/SorrowBlue/AndroidGradleKts\\">Github</a>\\n<a href=\\"https://travis-ci.com/SorrowBlue/sorrowblue.github.io\\"><img src=\\"https://travis-ci.com/SorrowBlue/sorrowblue.github.io.svg?token=69SwqJzT2mqgmiiajAiQ&amp;branch=gh-pages\\" alt=\\"Build Status\\"></a></p>\\n<h2>環境</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">tool</th>\\n<th style=\\"text-align:center\\">version</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">Gradle</td>\\n<td style=\\"text-align:center\\">5.4.1</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Kotlin</td>\\n<td style=\\"text-align:center\\">1.3.41</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Android Studio</td>\\n<td style=\\"text-align:center\\">3.5 Beta 5</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Android Gradle Plugin</td>\\n<td style=\\"text-align:center\\">3.5.0-beta05</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>既存のプロジェクトへの導入</h2>\\n<ol>\\n<li>\\n<p>設定の変更\\n<code>ファイル - 設定 - 言語＆フレームワーク - Kotlin - Kotlinスクリプト</code>\\nファイル変更時にスクリプト依存関係を再ロードする にチェックする<br>\\n<img src=\\"/images/android-gradle-kts/settings_kotlin-script_reload.webp\\" alt=\\"build_src\\"></p>\\n</li>\\n<li>\\n<p>プロジェクトルートに <code>buildSrc</code> を作成<br>\\n<img src=\\"/images/android-gradle-kts/build_src.webp\\" alt=\\"build_src\\"></p>\\n</li>\\n<li>\\n<p><code>buildSrc</code> に <code>build.gradle.kts</code> と <code>settings.gradle.kts</code> を作成<br>\\n<img src=\\"/images/android-gradle-kts/build-settings-gradle-kts.webp\\" alt=\\"build-settings-gradle-kts\\"></p>\\n</li>\\n<li>\\n<p><code>build.gradle.kts</code> に記述</p>\\n<pre><code class=\\"hljs\\">plugins {\\n  `kotlin-dsl`\\n}\\nrepositories {\\n      jcenter()\\n      google()\\n  }\\n  dependencies {\\n      implementation(<span class=\\"hljs-string\\">\\"com.android.tools.build:gradle:3.5.0-beta05\\"</span>)\\n      implementation(<span class=\\"hljs-string\\">\\"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41\\"</span>)\\n  }</code></pre></li>\\n<li>\\n<p>Sync now(今すぐ同期)<br>\\n<img src=\\"/images/android-gradle-kts/sync_now.webp\\" alt=\\"sync_now\\"></p>\\n</li>\\n<li>\\n<p>プロジェクトルートの <code>settings.gradle</code> を <code>settings.gradle.kts</code> にリネーム<br>\\n<img src=\\"/images/android-gradle-kts/settings-gradle-kts.webp\\" alt=\\"settings-gradle-kts\\"></p>\\n</li>\\n<li>\\n<p><code>settings.gradle.kts</code> を編集</p>\\n</li>\\n</ol>\\n<pre><code class=\\"hljs\\">include(<span class=\\"hljs-string\\">\\":app\\"</span>)\\nrootProject.name = <span class=\\"hljs-string\\">\\"My Application\\"</span></code></pre><ol start=\\"8\\">\\n<li>\\n<p>プロジェクトルートの <code>build.gradle</code> を <code>build.gradle.kts</code> にリネーム</p>\\n</li>\\n<li>\\n<p><code>build.gradle.kts</code> を編集</p>\\n</li>\\n</ol>\\n<pre><code class=\\"hljs\\">buildscript {\\n    repositories {\\n        google()\\n        jcenter()\\n    }\\n    dependencies {\\n        classpath(<span class=\\"hljs-string\\">\\"com.android.tools.build:gradle:3.5.0-beta05\\"</span>)\\n        classpath(<span class=\\"hljs-string\\">\\"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41\\"</span>)\\n    }\\n}\\nallprojects {\\n    repositories {\\n        google()\\n        jcenter()\\n\\n    }\\n}\\ntask&lt;Delete&gt;(<span class=\\"hljs-string\\">\\"clean\\"</span>) { delete(rootProject.buildDir) }</code></pre><ol start=\\"10\\">\\n<li>\\n<p><code>app/build.gradle</code> を <code>app/build.gradle.kts</code> にリネーム</p>\\n</li>\\n<li>\\n<p><code>app/build.gradle.kts</code> を編集</p>\\n</li>\\n</ol>\\n<pre><code class=\\"hljs\\">plugins {\\n    id(<span class=\\"hljs-string\\">\\"com.android.application\\"</span>)\\n    id(<span class=\\"hljs-string\\">\\"kotlin-android\\"</span>)\\n    id(<span class=\\"hljs-string\\">\\"kotlin-android-extensions\\"</span>)\\n}\\nandroid {\\n    compileSdkVersion(<span class=\\"hljs-number\\">29</span>)\\n    buildToolsVersion = <span class=\\"hljs-string\\">\\"29.0.0\\"</span>\\n    defaultConfig {\\n        applicationId = <span class=\\"hljs-string\\">\\"com.sorrowblue.myapplication\\"</span>\\n        minSdkVersion(<span class=\\"hljs-number\\">23</span>)\\n        targetSdkVersion(<span class=\\"hljs-number\\">29</span>)\\n        versionCode =<span class=\\"hljs-number\\">1</span>\\n        versionName =<span class=\\"hljs-string\\">\\"1.0\\"</span>\\n        testInstrumentationRunner = <span class=\\"hljs-string\\">\\"androidx.test.runner.AndroidJUnitRunner\\"</span>\\n    }\\n    buildTypes {\\n        getByName(<span class=\\"hljs-string\\">\\"release\\"</span>) {\\n            isMinifyEnabled = <span class=\\"hljs-literal\\">false</span>\\n            proguardFiles(getDefaultProguardFile(<span class=\\"hljs-string\\">\\"proguard-android-optimize.txt\\"</span>), <span class=\\"hljs-string\\">\\"proguard-rules.pro\\"</span>)\\n        }\\n    }\\n}\\ndependencies {\\n    implementation(<span class=\\"hljs-string\\">\\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.41\\"</span>)\\n    implementation(<span class=\\"hljs-string\\">\\"androidx.appcompat:appcompat:1.0.2\\"</span>)\\n    implementation(<span class=\\"hljs-string\\">\\"androidx.core:core-ktx:1.0.2\\"</span>)\\n    implementation(<span class=\\"hljs-string\\">\\"androidx.constraintlayout:constraintlayout:1.1.3\\"</span>)\\n    testImplementation(<span class=\\"hljs-string\\">\\"junit:junit:4.12\\"</span>)\\n    androidTestImplementation(<span class=\\"hljs-string\\">\\"androidx.test.ext:junit:1.1.0\\"</span>)\\n    androidTestImplementation(<span class=\\"hljs-string\\">\\"androidx.test.espresso:espresso-core:3.1.1\\"</span>)\\n}</code></pre><ol start=\\"12\\">\\n<li>Sync now(今すぐ同期)</li>\\n</ol>\\n<h2>スマートに書く</h2>\\n<p><code>getByName(&quot;release&quot;)</code> このあたりを拡張関数で記述する</p>\\n<p><code>buildSrc/src/main/kotlin/Project.kt</code> を作成</p>\\n<p><code>Project.kt</code></p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">import</span> com.android.build.gradle.<span class=\\"hljs-keyword\\">internal</span>.dsl.BuildType\\n<span class=\\"hljs-keyword\\">import</span> org.gradle.api.NamedDomainObjectContainer\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> NamedDomainObjectContainer<span class=\\"hljs-type\\">&lt;BuildType&gt;</span>.<span class=\\"hljs-title\\">release</span><span class=\\"hljs-params\\">(body: <span class=\\"hljs-type\\">BuildType</span>.()</span></span> -&gt; <span class=\\"hljs-built_in\\">Unit</span>) {\\n    getByName(<span class=\\"hljs-string\\">\\"release\\"</span>) { body(<span class=\\"hljs-keyword\\">this</span>) }\\n}</code></pre><p><code>app/build.gradle.kts</code></p>\\n<pre><code class=\\"hljs\\">release {\\n\\tisMinifyEnabled = <span class=\\"hljs-literal\\">false</span>\\n\\tproguardFiles(getDefaultProguardFile(<span class=\\"hljs-string\\">\\"proguard-android-optimize.txt\\"</span>), <span class=\\"hljs-string\\">\\"proguard-rules.pro\\"</span>)\\n}</code></pre><h2>変数を定義</h2>\\n<p>もちろん変数も定義して使える</p>\\n<p><code>buildSrc/src/main/kotlin/Versions.kt</code></p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">object</span> Versions {\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> kotlin = <span class=\\"hljs-string\\">\\"1.3.41\\"</span>\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> appcompat = <span class=\\"hljs-string\\">\\"1.0.2\\"</span>\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> `core-ktx` = <span class=\\"hljs-string\\">\\"1.0.2\\"</span>\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> constraintlayout = <span class=\\"hljs-string\\">\\"1.1.3\\"</span>\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> junit = <span class=\\"hljs-string\\">\\"4.12\\"</span>\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> androidx_junit = <span class=\\"hljs-string\\">\\"1.1.0\\"</span>\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> `espresso-core` = <span class=\\"hljs-string\\">\\"3.1.1\\"</span>\\n}</code></pre><p><code>buildSrc/src/main/kotlin/Deps.kt</code></p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">object</span> Deps {\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> `kotlin-stdlib-jdk7` = <span class=\\"hljs-string\\">\\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:<span class=\\"hljs-subst\\">${Versions.kotlin}</span>\\"</span>\\n\\t<span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> appcompat = <span class=\\"hljs-string\\">\\"androidx.appcompat:appcompat:<span class=\\"hljs-subst\\">${Versions.appcompat}</span>\\"</span>\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> `core-ktx` = (<span class=\\"hljs-string\\">\\"androidx.core:core-ktx:<span class=\\"hljs-subst\\">${Versions.`core-ktx`}</span>\\"</span>)\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> constraintlayout = <span class=\\"hljs-string\\">\\"androidx.constraintlayout:constraintlayout:<span class=\\"hljs-subst\\">${Versions.constraintlayout}</span>\\"</span>\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> junit = <span class=\\"hljs-string\\">\\"junit:junit:<span class=\\"hljs-subst\\">${Versions.junit}</span>\\"</span>\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> androidx_junit = <span class=\\"hljs-string\\">\\"androidx.test.ext:junit:<span class=\\"hljs-subst\\">${Versions.androidx_junit}</span>\\"</span>\\n    <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-keyword\\">val</span> `espresso-core` = <span class=\\"hljs-string\\">\\"androidx.test.espresso:espresso-core:<span class=\\"hljs-subst\\">${Versions.`espresso-core`}</span>\\"</span>\\n}</code></pre><p><code>app/build.gradle.kts</code></p>\\n<pre><code class=\\"hljs\\">dependencies {\\n    implementation(Deps.`kotlin-stdlib-jdk7`)\\n    implementation(Deps.appcompat)\\n    implementation(Deps.`core-ktx`)\\n    implementation(Deps.constraintlayout)\\n    testImplementation(Deps.junit)\\n    androidTestImplementation(Deps.androidx_junit)\\n    androidTestImplementation(Deps.`espresso-core`)\\n}</code></pre><h2>Tips</h2>\\n<h3>各モジュールの <code>minSdkVersion</code> <code>targetSdkVersion</code> などをまとめる</h3>\\n<p><code>Project.kt</code></p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> Project.<span class=\\"hljs-title\\">module</span><span class=\\"hljs-params\\">(action: <span class=\\"hljs-type\\">LibraryExtension</span>.()</span></span> -&gt; <span class=\\"hljs-built_in\\">Unit</span>) {\\n\\tafterEvaluate {\\n\\t\\t<span class=\\"hljs-keyword\\">if</span> (hasProperty(<span class=\\"hljs-string\\">\\"android\\"</span>) &amp;&amp; project.name != <span class=\\"hljs-string\\">\\"app\\"</span>) {\\n\\t\\t\\taction(extensions.getByName(<span class=\\"hljs-string\\">\\"android\\"</span>) <span class=\\"hljs-keyword\\">as</span> LibraryExtension)\\n\\t\\t}\\n\\t}\\n}</code></pre><p><code>/build.gradle.kts</code></p>\\n<pre><code class=\\"hljs\\">subprojects {\\n\\tmodule {\\n\\t\\tcompileSdkVersion(COMPILE_SDK_VERSION)\\n\\t\\tdefaultConfig {\\n\\t\\t\\tminSdkVersion(MIN_SDK_VERSION)\\n\\t\\t\\ttargetSdkVersion(TARGET_SDK_VERSION)\\n\\t\\t\\tconsumerProguardFiles(`consumer-rules`)\\n\\t\\t\\ttestInstrumentationRunner = ANDROID_JUNIT_RUNNER\\n\\t\\t}\\n\\t}\\n}</code></pre><h3>任意の箇所で apply したいとき</h3>\\n<p><code>/app/build.gradle.kts</code></p>\\n<pre><code class=\\"hljs\\">plugins {\\n\\tid(<span class=\\"hljs-string\\">\\"com.google.gms.google-services\\"</span>) apply <span class=\\"hljs-literal\\">false</span>\\n}\\n<span class=\\"hljs-comment\\">/*..........processing..........*/</span>\\napply(plugin = <span class=\\"hljs-string\\">\\"com.google.gms.google-services\\"</span>)</code></pre><h3>プラグインを共通化したい</h3>\\n<p><code>/build.gradle.kts</code></p>\\n<pre><code class=\\"hljs\\">subprojects {\\n\\t<span class=\\"hljs-keyword\\">if</span> (project.name == <span class=\\"hljs-string\\">\\"app\\"</span>) {\\n\\t\\tapply(plugin = <span class=\\"hljs-string\\">\\"com.android.application\\"</span>)\\n\\t} <span class=\\"hljs-keyword\\">else</span> {\\n\\t\\tapply(plugin = <span class=\\"hljs-string\\">\\"com.android.library\\"</span>)\\n\\t}\\n\\tapply(plugin = <span class=\\"hljs-string\\">\\"kotlin-android\\"</span>)\\n\\tapply(plugin = <span class=\\"hljs-string\\">\\"kotlin-android-extensions\\"</span>)\\n}</code></pre>","dir":"static/content/blog/json","base":"2019-07-10_android-gradle-kts.json","ext":".json","sourceBase":"2019-07-10_android-gradle-kts.md","sourceExt":".md"}')},382:function(n){n.exports=JSON.parse('{"title":"NullチェックのいらないLiveData","desc":"android-architecture-componentsのLiveDataでNullableにしない方法","date":"2019/07/23","tags":"Android Kotlin","bodyContent":"### 下記のようなクラスを作成するだけ\\n```kotlin\\nclass MutableSafeLiveData<T : Any>(private val default: T) : MutableLiveData<T>(default) {\\n\\n\\toverride fun getValue() = super.getValue() ?: default\\n\\n\\tfun observe(owner: LifecycleOwner, observer: (T) -> Unit) =\\n\\t\\tObserver<T>(observer::invoke).also { observe(owner, it) }\\n\\n\\tfun observeForever(observer: (T) -> Unit) =\\n\\t\\tObserver<T>(observer::invoke).also(::observeForever)\\n\\n\\tfun observeWhen(owner: LifecycleOwner, value: T, observer: (T) -> Unit) =\\n\\t\\tObserver<T> { if (it == value) observer(it) }.also { observe(owner, it) }\\n}\\n```\\n\\n### 使い方\\n```kotlin\\nfun Fragment.main() {\\n\\tval data: MutableSafeLiveData<String> = MutableSafeLiveData(\\"abc\\")\\n\\tval getData: String = data.value\\n\\tdata.value = null // ← error\\n\\tdata.observe(this) { it: String ->\\n\\t\\tLog.d(\\"main\\", \\"data=$it\\")\\n\\t}\\n\\tdata.observeWhen(this, \\"abc\\") { it: String ->\\n\\t\\t// dataが abc のときだけ\\n\\t\\tLog.d(\\"main\\", \\"data=$it\\")\\n\\t}\\n}\\n```","bodyHtml":"<h3>下記のようなクラスを作成するだけ</h3>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MutableSafeLiveData</span>&lt;<span class=\\"hljs-type\\">T : Any</span>&gt;</span>(<span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-keyword\\">val</span> <span class=\\"hljs-keyword\\">default</span>: T) : MutableLiveData&lt;T&gt;(<span class=\\"hljs-keyword\\">default</span>) {\\n\\n\\t<span class=\\"hljs-keyword\\">override</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">getValue</span><span class=\\"hljs-params\\">()</span></span> = <span class=\\"hljs-keyword\\">super</span>.getValue() ?: <span class=\\"hljs-keyword\\">default</span>\\n\\n\\t<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">observe</span><span class=\\"hljs-params\\">(owner: <span class=\\"hljs-type\\">LifecycleOwner</span>, observer: (<span class=\\"hljs-type\\">T</span>)</span></span> -&gt; <span class=\\"hljs-built_in\\">Unit</span>) =\\n\\t\\tObserver&lt;T&gt;(observer::invoke).also { observe(owner, it) }\\n\\n\\t<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">observeForever</span><span class=\\"hljs-params\\">(observer: (<span class=\\"hljs-type\\">T</span>)</span></span> -&gt; <span class=\\"hljs-built_in\\">Unit</span>) =\\n\\t\\tObserver&lt;T&gt;(observer::invoke).also(::observeForever)\\n\\n\\t<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">observeWhen</span><span class=\\"hljs-params\\">(owner: <span class=\\"hljs-type\\">LifecycleOwner</span>, value: <span class=\\"hljs-type\\">T</span>, observer: (<span class=\\"hljs-type\\">T</span>)</span></span> -&gt; <span class=\\"hljs-built_in\\">Unit</span>) =\\n\\t\\tObserver&lt;T&gt; { <span class=\\"hljs-keyword\\">if</span> (it == value) observer(it) }.also { observe(owner, it) }\\n}</code></pre><h3>使い方</h3>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> Fragment.<span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">()</span></span> {\\n\\t<span class=\\"hljs-keyword\\">val</span> <span class=\\"hljs-keyword\\">data</span>: MutableSafeLiveData&lt;String&gt; = MutableSafeLiveData(<span class=\\"hljs-string\\">\\"abc\\"</span>)\\n\\t<span class=\\"hljs-keyword\\">val</span> getData: String = <span class=\\"hljs-keyword\\">data</span>.value\\n\\t<span class=\\"hljs-keyword\\">data</span>.value = <span class=\\"hljs-literal\\">null</span> <span class=\\"hljs-comment\\">// ← error</span>\\n\\t<span class=\\"hljs-keyword\\">data</span>.observe(<span class=\\"hljs-keyword\\">this</span>) { it: String -&gt;\\n\\t\\tLog.d(<span class=\\"hljs-string\\">\\"main\\"</span>, <span class=\\"hljs-string\\">\\"data=<span class=\\"hljs-variable\\">$it</span>\\"</span>)\\n\\t}\\n\\t<span class=\\"hljs-keyword\\">data</span>.observeWhen(<span class=\\"hljs-keyword\\">this</span>, <span class=\\"hljs-string\\">\\"abc\\"</span>) { it: String -&gt;\\n\\t\\t<span class=\\"hljs-comment\\">// dataが abc のときだけ</span>\\n\\t\\tLog.d(<span class=\\"hljs-string\\">\\"main\\"</span>, <span class=\\"hljs-string\\">\\"data=<span class=\\"hljs-variable\\">$it</span>\\"</span>)\\n\\t}\\n}</code></pre>","dir":"static/content/blog/json","base":"2019-07-23_non-null-livedata.json","ext":".json","sourceBase":"2019-07-23_non-null-livedata.md","sourceExt":".md"}')},383:function(n){n.exports=JSON.parse('{"title":"Markdown チートシート","desc":"多分網羅していると思うよ","date":"2019/07/29","tags":"Markdown","bodyContent":"# Block Elements\\n\\n- [段落](##段落)\\n- [改行](##改行)\\n- [見出し](##見出し)\\n- [引用](##引用)\\n- [リスト](##リスト)\\n- [強調](##強調)\\n- [コード](##コード)\\n- [水平線](##水平線)\\n- [画像](##画像)\\n- [リンク](##リンク)\\n- [テーブル](##テーブル)\\n\\n---\\n\\n## 段落\\n\\n```md\\nMarkdown の段落は、1 行以上の空白行で区切ります。\\n\\n通常の段落は、インデントするべきではありません。\\n```\\n\\nMarkdown の段落は、1 行以上の空白行で区切ります。\\n\\n通常の段落は、インデントするべきではありません。\\n\\n---\\n\\n## 改行\\n\\n```md\\n改行は、<br />を使うか、<br />\\n2 つ以上のスペースを使用します。\\n改行しました。\\n```\\n\\n改行は [\\\\<br />](https://developer.mozilla.org/ja/docs/Web/HTML/Element/br) を使うか、<br />\\n2 つ以上のスペースを使用します。  \\n改行しました。\\n\\n---\\n\\n## 見出し\\n\\nMarkdown は Setext と atx の 2 つのスタイルのヘッダをサポートしています。\\n\\n### Setext スタイル\\n\\nSetext スタイルの見出しは、対象行の次の行に `=` 等号（第 1 レベル）と `-` ダッシュ（第 2 レベル）を使用します。\\n\\n```\\n見出し 1\\n========\\n\\n見出し 2\\n--------\\n```\\n\\n見出し 1\\n\\n## 見出し 2\\n\\n## Atx スタイル\\n\\nAtx スタイルのヘッダーは、行の先頭に１から６個の `#` ハッシュを使用します。\\n\\n```md\\n# 見出し １\\n\\n## 見出し ２\\n\\n### 見出し ３\\n\\n#### 見出し ４\\n\\n##### 見出し ５\\n\\n###### 見出し ６\\n```\\n\\n# 見出し １\\n\\n## 見出し ２\\n\\n### 見出し ３\\n\\n#### 見出し ４\\n\\n##### 見出し ５\\n\\n###### 見出し ６\\n\\nまた、見出しは同じ数のハッシュで閉じることができます。\\n\\n```\\n### 見出し ３ ###\\n```\\n\\n### 見出し ３\\n\\n---\\n\\n## 引用\\n\\n引用・転載文を使用するには行頭に `>` 右アングルブラケットを使用します。段落の最初にだけ使用することもできます。\\n\\n```\\n> Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n> 本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\n> しかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n> 各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n\\n> Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\nしかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n```\\n\\n> Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n> 本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\n> しかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n> 各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n> [Wikipedia-Markdown](https://ja.wikipedia.org/wiki/Markdown)\\n\\n## リスト\\n\\nMarkdown は番号付きリストと番号なしリストをサポートしています。\\n\\n番号なしリストは、 `*` アスタリスクか `+` プラス、 `-` ハイフンを使用します。\\n\\n```\\n- 項目１\\n- 項目２\\n- 項目３\\n\\n* 項目１\\n* 項目２\\n* 項目３\\n\\n+ 項目１\\n+ 項目２\\n+ 項目３\\n```\\n\\n- 項目１\\n- 項目２\\n- 項目３\\n\\n番号付きリストは、数字の後に `.` ピリオドを使用します。しかし数字はすべて同じでも構いません。\\n\\n```md\\n1. 項目１\\n2. 項目２\\n3. 項目３\\n```\\n\\n1. 項目１\\n2. 項目２\\n3. 項目３\\n\\n```md\\n1. 項目１\\n1. 項目２\\n1. 項目３\\n```\\n\\n1. 項目１\\n1. 項目２\\n1. 項目３\\n\\nリスト項目内に他の要素を含めるには、インデントする必要があります。\\n\\n````md\\n- Markdown\\n  > Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n  > 本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\n  > しかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n  > 各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n  > [Wikipedia-Markdown](https://ja.wikipedia.org/wiki/Markdown)\\n- `Kotlin`\\n- ```kt\\n  fun main() = print(\\"1\\" + \\"2\\")\\n  ```\\n````\\n\\n- Markdown\\n\\n  > Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n  > 本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\n  > しかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n  > 各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n  > [Wikipedia-Markdown](https://ja.wikipedia.org/wiki/Markdown)\\n\\n- `Kotlin`\\n  ```kt\\n  fun main() = print(\\"1\\" + \\"2\\")\\n  ```\\n\\n## 強調\\n\\n`*` アスタリスクか`_`アンダースコアを使用します。一つなら [\\\\<em>\\\\</em>](https://developer.mozilla.org/ja/docs/Web/HTML/Element/em) 、２つなら [\\\\<strong>\\\\</strong>](https://developer.mozilla.org/ja/docs/Web/HTML/Element/strong) で囲むのと同等です。\\n\\n```md\\n_The Emphasis element_\\n_The Emphasis element_\\n\\n**The Strong Importance element**\\n**The Strong Importance element**\\n```\\n\\n_The Emphasis element_\\n**The Strong Importance element**\\n\\n---\\n\\n## コード\\n\\nコードは対象の文字列を `` ` `` バッククォートで囲みます。\\nコード内にバッククォートを含める場合は、複数のバッククォートで囲みます。\\n\\n```md\\n`print()`\\n`` print(`) ``\\n```\\n\\n`print()`  \\n`` print(`) ``\\n\\n---\\n\\n## 水平線\\n\\n1 行に 3 つ以上の `-` ハイフンか `*` アスタリスク、`_` アンダースコアを使用するか、\\n[\\\\<hr />](https://developer.mozilla.org/ja/docs/Web/HTML/Element/hr)を使用します。\\n\\n```\\n---\\n***\\n___\\n<hr>\\n```\\n\\n---\\n\\n<hr>\\n\\n<br>\\n\\n---\\n\\n## 画像\\n\\n画像は `![画像の説明](画像のパス)` または `![画像の説明](画像のパス \\"オプション\\")` を使用します。\\n\\n```md\\n![三色団子 ×5](/images/blog.webp)\\n![三色団子 ×5](/images/blog.webp \'ブログの画像\')\\n![無効な画像](/images/blank.webp)\\n```\\n\\n![三色団子 ×5](/images/blog.webp)\\n![三色団子 ×5](/images/blog.webp \'ブログの画像\')\\n![無効な画像](/images/blank.webp)\\n\\nMarkdown は画像のリサイズには対応していないので、 `<img alt=\\"画像の説明\\" src=\\"画像のパス\\" width=\\"幅\\" height=\\"高さ\\">` を使用します。\\n\\n```html\\n<img alt=\\"三色団子 ×5\\" src=\\"/images/blog.webp\\" width=\\"160\\" height=\\"90\\" />\\n```\\n\\n<img alt=\\"三色団子 ×5\\" src=\\"/images/blog.webp\\" width=\\"160\\" height=\\"90\\">\\n\\n---\\n\\n## リンク\\n\\nMarkdown は、URL と E メールアドレスからリンクを作成します。\\n\\n```md\\nhttps://sorrowblue.com  \\ninfo-blog@sorrowblue.com\\n```\\n\\nhttps://sorrowblue.com  \\ninfo-blog@sorrowblue.com\\n\\n### 参照リンク\\n\\n`[リンク名][参照名]` を複数設置し、 `[参照名]: リンク \'オプション\'` を一つ設置します\\n\\n```md\\n[googlelink]: https://www.google.co.jp/ \'Google\'\\n\\n[Google][googlelink]へのリンク\\n```\\n\\n[googlelink]: https://www.google.co.jp/ \'Google\'\\n\\n[Google][googlelink]へのリンク\\n\\n参照名は省略することもできます\\n\\n```md\\n[yahoo]: https://www.yahoo.co.jp/\\n\\n[yahoo]へのリンク\\n```\\n\\n[yahoo]: https://www.yahoo.co.jp/\\n\\n[yahoo]へのリンク\\n\\n---\\n\\n## テーブル\\n\\n`-` ハイフンと `|` パイプを使用します。\\n\\n```md\\n| 見出しセル | 見出しセル |\\n| ---------- | ---------- |\\n| データセル | データセル |\\n| データセル | データセル |\\n```\\n\\n| 見出しセル | 見出しセル |\\n| ---------- | ---------- |\\n| データセル | データセル |\\n| データセル | データセル |\\n\\n### 左右中央寄せ\\n\\n```md\\n| 左寄せ見出しセル | 中央寄せ見出しセル | 右寄せ見出しセル |\\n| :--------------- | :----------------: | ---------------: |\\n| データセル       |     データセル     |       データセル |\\n| データセル       |     データセル     |       データセル |\\n```\\n\\n| 左寄せ見出しセル | 中央寄せ見出しセル | 右寄せ見出しセル |\\n| :--------------- | :----------------: | ---------------: |\\n| データセル       |     データセル     |       データセル |\\n| データセル       |     データセル     |       データセル |","bodyHtml":"<h1>Block Elements</h1>\\n<ul>\\n<li><a href=\\"##%E6%AE%B5%E8%90%BD\\">段落</a></li>\\n<li><a href=\\"##%E6%94%B9%E8%A1%8C\\">改行</a></li>\\n<li><a href=\\"##%E8%A6%8B%E5%87%BA%E3%81%97\\">見出し</a></li>\\n<li><a href=\\"##%E5%BC%95%E7%94%A8\\">引用</a></li>\\n<li><a href=\\"##%E3%83%AA%E3%82%B9%E3%83%88\\">リスト</a></li>\\n<li><a href=\\"##%E5%BC%B7%E8%AA%BF\\">強調</a></li>\\n<li><a href=\\"##%E3%82%B3%E3%83%BC%E3%83%89\\">コード</a></li>\\n<li><a href=\\"##%E6%B0%B4%E5%B9%B3%E7%B7%9A\\">水平線</a></li>\\n<li><a href=\\"##%E7%94%BB%E5%83%8F\\">画像</a></li>\\n<li><a href=\\"##%E3%83%AA%E3%83%B3%E3%82%AF\\">リンク</a></li>\\n<li><a href=\\"##%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\\">テーブル</a></li>\\n</ul>\\n<hr>\\n<h2>段落</h2>\\n<pre><code class=\\"hljs\\">Markdown の段落は、1 行以上の空白行で区切ります。\\n\\n通常の段落は、インデントするべきではありません。</code></pre><p>Markdown の段落は、1 行以上の空白行で区切ります。</p>\\n<p>通常の段落は、インデントするべきではありません。</p>\\n<hr>\\n<h2>改行</h2>\\n<pre><code class=\\"hljs\\">改行は、&lt;br /&gt;を使うか、&lt;br /&gt;\\n2 つ以上のスペースを使用します。\\n改行しました。</code></pre><p>改行は <a href=\\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/br\\">&lt;br /&gt;</a> を使うか、<br />\\n2 つ以上のスペースを使用します。<br>\\n改行しました。</p>\\n<hr>\\n<h2>見出し</h2>\\n<p>Markdown は Setext と atx の 2 つのスタイルのヘッダをサポートしています。</p>\\n<h3>Setext スタイル</h3>\\n<p>Setext スタイルの見出しは、対象行の次の行に <code>=</code> 等号（第 1 レベル）と <code>-</code> ダッシュ（第 2 レベル）を使用します。</p>\\n<pre><code>見出し 1\\n========\\n\\n見出し 2\\n--------\\n</code></pre>\\n<p>見出し 1</p>\\n<h2>見出し 2</h2>\\n<h2>Atx スタイル</h2>\\n<p>Atx スタイルのヘッダーは、行の先頭に１から６個の <code>#</code> ハッシュを使用します。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-section\\"># 見出し １</span>\\n\\n<span class=\\"hljs-section\\">## 見出し ２</span>\\n\\n<span class=\\"hljs-section\\">### 見出し ３</span>\\n\\n<span class=\\"hljs-section\\">#### 見出し ４</span>\\n\\n<span class=\\"hljs-section\\">##### 見出し ５</span>\\n\\n<span class=\\"hljs-section\\">###### 見出し ６</span></code></pre><h1>見出し １</h1>\\n<h2>見出し ２</h2>\\n<h3>見出し ３</h3>\\n<h4>見出し ４</h4>\\n<h5>見出し ５</h5>\\n<h6>見出し ６</h6>\\n<p>また、見出しは同じ数のハッシュで閉じることができます。</p>\\n<pre><code>### 見出し ３ ###\\n</code></pre>\\n<h3>見出し ３</h3>\\n<hr>\\n<h2>引用</h2>\\n<p>引用・転載文を使用するには行頭に <code>&gt;</code> 右アングルブラケットを使用します。段落の最初にだけ使用することもできます。</p>\\n<pre><code>&gt; Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n&gt; 本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\n&gt; しかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n&gt; 各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n\\n&gt; Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\nしかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n</code></pre>\\n<blockquote>\\n<p>Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\nしかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n<a href=\\"https://ja.wikipedia.org/wiki/Markdown\\">Wikipedia-Markdown</a></p>\\n</blockquote>\\n<h2>リスト</h2>\\n<p>Markdown は番号付きリストと番号なしリストをサポートしています。</p>\\n<p>番号なしリストは、 <code>*</code> アスタリスクか <code>+</code> プラス、 <code>-</code> ハイフンを使用します。</p>\\n<pre><code>- 項目１\\n- 項目２\\n- 項目３\\n\\n* 項目１\\n* 項目２\\n* 項目３\\n\\n+ 項目１\\n+ 項目２\\n+ 項目３\\n</code></pre>\\n<ul>\\n<li>項目１</li>\\n<li>項目２</li>\\n<li>項目３</li>\\n</ul>\\n<p>番号付きリストは、数字の後に <code>.</code> ピリオドを使用します。しかし数字はすべて同じでも構いません。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-bullet\\">1. </span>項目１\\n<span class=\\"hljs-bullet\\">2. </span>項目２\\n<span class=\\"hljs-bullet\\">3. </span>項目３</code></pre><ol>\\n<li>項目１</li>\\n<li>項目２</li>\\n<li>項目３</li>\\n</ol>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-bullet\\">1. </span>項目１\\n<span class=\\"hljs-bullet\\">1. </span>項目２\\n<span class=\\"hljs-bullet\\">1. </span>項目３</code></pre><ol>\\n<li>項目１</li>\\n<li>項目２</li>\\n<li>項目３</li>\\n</ol>\\n<p>リスト項目内に他の要素を含めるには、インデントする必要があります。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-bullet\\">- </span>Markdown\\n  &gt; Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n  &gt; 本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\n  &gt; しかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n  &gt; 各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n  &gt; [<span class=\\"hljs-string\\">Wikipedia-Markdown</span>](<span class=\\"hljs-link\\">https://ja.wikipedia.org/wiki/Markdown</span>)\\n<span class=\\"hljs-bullet\\">- </span><span class=\\"hljs-code\\">`Kotlin`</span>\\n<span class=\\"hljs-bullet\\">- </span><span class=\\"hljs-code\\">```kt\\n  fun main() = print(\\"1\\" + \\"2\\")\\n  ```</span></code></pre><ul>\\n<li>\\n<p>Markdown</p>\\n<blockquote>\\n<p>Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。\\n本来はプレーンテキスト形式で手軽に書いた文書から HTML を生成するために開発されたものである。\\nしかし、現在では HTML のほかパワーポイント形式や LATEX 形式のファイルへ変換するソフトウェア（コンバータ）も開発されている。\\n各コンバータの開発者によって多様な拡張が施されるため、各種の方言が存在する。\\n<a href=\\"https://ja.wikipedia.org/wiki/Markdown\\">Wikipedia-Markdown</a></p>\\n</blockquote>\\n</li>\\n<li>\\n<p><code>Kotlin</code></p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fun</span> <span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">()</span></span> = print(<span class=\\"hljs-string\\">\\"1\\"</span> + <span class=\\"hljs-string\\">\\"2\\"</span>)</code></pre></li>\\n</ul>\\n<h2>強調</h2>\\n<p><code>*</code> アスタリスクか<code>_</code>アンダースコアを使用します。一つなら <a href=\\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/em\\">&lt;em&gt;&lt;/em&gt;</a> 、２つなら <a href=\\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/strong\\">&lt;strong&gt;&lt;/strong&gt;</a> で囲むのと同等です。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-emphasis\\">_The Emphasis element_</span>\\n<span class=\\"hljs-emphasis\\">_The Emphasis element_</span>\\n\\n<span class=\\"hljs-strong\\">**The Strong Importance element**</span>\\n<span class=\\"hljs-strong\\">**The Strong Importance element**</span></code></pre><p><em>The Emphasis element</em>\\n<strong>The Strong Importance element</strong></p>\\n<hr>\\n<h2>コード</h2>\\n<p>コードは対象の文字列を <code>`</code> バッククォートで囲みます。\\nコード内にバッククォートを含める場合は、複数のバッククォートで囲みます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-code\\">`print()`</span>\\n<span class=\\"hljs-code\\">`` print(`</span>) ``</code></pre><p><code>print()</code><br>\\n<code>print(`)</code></p>\\n<hr>\\n<h2>水平線</h2>\\n<p>1 行に 3 つ以上の <code>-</code> ハイフンか <code>*</code> アスタリスク、<code>_</code> アンダースコアを使用するか、\\n<a href=\\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/hr\\">&lt;hr /&gt;</a>を使用します。</p>\\n<pre><code>---\\n***\\n___\\n&lt;hr&gt;\\n</code></pre>\\n<hr>\\n<hr>\\n<br>\\n<hr>\\n<h2>画像</h2>\\n<p>画像は <code>![画像の説明](画像のパス)</code> または <code>![画像の説明](画像のパス &quot;オプション&quot;)</code> を使用します。</p>\\n<pre><code class=\\"hljs\\">![<span class=\\"hljs-string\\">三色団子 ×5</span>](<span class=\\"hljs-link\\">/images/blog.webp</span>)\\n![<span class=\\"hljs-string\\">三色団子 ×5</span>](<span class=\\"hljs-link\\">/images/blog.webp \'ブログの画像\'</span>)\\n![<span class=\\"hljs-string\\">無効な画像</span>](<span class=\\"hljs-link\\">/images/blank.webp</span>)</code></pre><p><img src=\\"/images/blog.webp\\" alt=\\"三色団子 ×5\\">\\n<img src=\\"/images/blog.webp\\" alt=\\"三色団子 ×5\\" title=\\"ブログの画像\\">\\n<img src=\\"/images/blank.webp\\" alt=\\"無効な画像\\"></p>\\n<p>Markdown は画像のリサイズには対応していないので、 <code>&lt;img alt=&quot;画像の説明&quot; src=&quot;画像のパス&quot; width=&quot;幅&quot; height=&quot;高さ&quot;&gt;</code> を使用します。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">img</span> <span class=\\"hljs-attr\\">alt</span>=<span class=\\"hljs-string\\">\\"三色団子 ×5\\"</span> <span class=\\"hljs-attr\\">src</span>=<span class=\\"hljs-string\\">\\"/images/blog.webp\\"</span> <span class=\\"hljs-attr\\">width</span>=<span class=\\"hljs-string\\">\\"160\\"</span> <span class=\\"hljs-attr\\">height</span>=<span class=\\"hljs-string\\">\\"90\\"</span> /&gt;</span></code></pre><img alt=\\"三色団子 ×5\\" src=\\"/images/blog.webp\\" width=\\"160\\" height=\\"90\\">\\n<hr>\\n<h2>リンク</h2>\\n<p>Markdown は、URL と E メールアドレスからリンクを作成します。</p>\\n<pre><code class=\\"hljs\\">https://sorrowblue.com  \\ninfo-blog@sorrowblue.com</code></pre><p><a href=\\"https://sorrowblue.com\\">https://sorrowblue.com</a><br>\\n<a href=\\"mailto:info-blog@sorrowblue.com\\">info-blog@sorrowblue.com</a></p>\\n<h3>参照リンク</h3>\\n<p><code>[リンク名][参照名]</code> を複数設置し、 <code>[参照名]: リンク \'オプション\'</code> を一つ設置します</p>\\n<pre><code class=\\"hljs\\">[<span class=\\"hljs-symbol\\">googlelink</span>]: <span class=\\"hljs-link\\">https://www.google.co.jp/ \'Google\'</span>\\n\\n[<span class=\\"hljs-string\\">Google</span>][<span class=\\"hljs-symbol\\">googlelink</span>]へのリンク</code></pre><p><a href=\\"https://www.google.co.jp/\\" title=\\"Google\\">Google</a>へのリンク</p>\\n<p>参照名は省略することもできます</p>\\n<pre><code class=\\"hljs\\">[<span class=\\"hljs-symbol\\">yahoo</span>]: <span class=\\"hljs-link\\">https://www.yahoo.co.jp/</span>\\n\\n[yahoo]へのリンク</code></pre><p><a href=\\"https://www.yahoo.co.jp/\\">yahoo</a>へのリンク</p>\\n<hr>\\n<h2>テーブル</h2>\\n<p><code>-</code> ハイフンと <code>|</code> パイプを使用します。</p>\\n<pre><code class=\\"hljs\\">| 見出しセル | 見出しセル |\\n| ---------- | ---------- |\\n| データセル | データセル |\\n| データセル | データセル |</code></pre><table>\\n<thead>\\n<tr>\\n<th>見出しセル</th>\\n<th>見出しセル</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>データセル</td>\\n<td>データセル</td>\\n</tr>\\n<tr>\\n<td>データセル</td>\\n<td>データセル</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3>左右中央寄せ</h3>\\n<pre><code class=\\"hljs\\">| 左寄せ見出しセル | 中央寄せ見出しセル | 右寄せ見出しセル |\\n| :--------------- | :----------------: | ---------------: |\\n| データセル       |     データセル     |       データセル |\\n| データセル       |     データセル     |       データセル |</code></pre><table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">左寄せ見出しセル</th>\\n<th style=\\"text-align:center\\">中央寄せ見出しセル</th>\\n<th style=\\"text-align:right\\">右寄せ見出しセル</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">データセル</td>\\n<td style=\\"text-align:center\\">データセル</td>\\n<td style=\\"text-align:right\\">データセル</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">データセル</td>\\n<td style=\\"text-align:center\\">データセル</td>\\n<td style=\\"text-align:right\\">データセル</td>\\n</tr>\\n</tbody>\\n</table>\\n","dir":"static/content/blog/json","base":"2019-07-29_markdown-cheat-sheet.json","ext":".json","sourceBase":"2019-07-29_markdown-cheat-sheet.md","sourceExt":".md"}')},384:function(n,e,t){"use strict";var l=t(366);t.n(l).a},385:function(n,e,t){(n.exports=t(9)(!1)).push([n.i,'.markdown h1,.markdown h2,.markdown h3,.markdown h4,.markdown h5,.markdown h6{margin-top:16px;margin-bottom:8px}.markdown h1,.markdown h2{border-bottom:4px solid #fff}.markdown a{text-decoration:none}.markdown a:hover{text-decoration:underline}.markdown table{margin:8px 0;border-collapse:collapse;color:#212121}.markdown table td,.markdown table th{border:1px solid #fff;padding:6px 13px}.markdown table th{color:#fff;background-color:#707070}.markdown table tr{background-color:#cfcfcf}.markdown table tr:nth-child(2n){background-color:#9e9e9e}.markdown code{padding:0 8px}.markdown code:after,.markdown code:before{content:""}.markdown pre{margin:8px 0}.markdown pre code{color:#bababa;padding:8px;width:100%}.markdown pre code:after,.markdown pre code:before{content:""}.markdown hr{margin:32px 0;border-width:0 0 1px;-o-border-image:linear-gradient(90deg,hsla(0,0%,100%,.5),hsla(0,0%,100%,0) 25%,hsla(0,0%,100%,.5) 50%,hsla(0,0%,100%,0) 75%,hsla(0,0%,100%,.5)) 0 0 100%;border-image:linear-gradient(90deg,hsla(0,0%,100%,.5),hsla(0,0%,100%,0) 25%,hsla(0,0%,100%,.5) 50%,hsla(0,0%,100%,0) 75%,hsla(0,0%,100%,.5)) 0 0 100%;border-style:solid}.markdown blockquote{background-color:hsla(0,0%,100%,.1);padding:8px 8px 8px 16px;border-left:4px solid #fff}.markdown blockquote a{color:#90ee90}.markdown img{max-width:100%}.hljs{display:block;overflow-x:auto;padding:.5em;border:1px solid #fff;background:#2b2b2b!important;color:#bababa}.hljs-emphasis,.hljs-strong{color:#a8a8a2}.hljs-bullet,.hljs-link,.hljs-literal,.hljs-number,.hljs-quote,.hljs-regexp{color:#6896ba}.hljs-code,.hljs-selector-class{color:#a6e22e}.hljs-emphasis{font-style:italic}.hljs-attribute,.hljs-keyword,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-variable{color:#cb7832}.hljs-params{color:#b9b9b9}.hljs-string{color:#6a8759}.hljs-addition,.hljs-built_in,.hljs-builtin-name,.hljs-selector-attr,.hljs-selector-id,.hljs-selector-pseudo,.hljs-subst,.hljs-symbol,.hljs-template-tag,.hljs-template-variable,.hljs-type{color:#e0c46c}.hljs-comment,.hljs-deletion,.hljs-meta{color:#7f7f7f}',""])},391:function(n,e,t){"use strict";t.r(e);var l={validate:function(n){n.params;return!0},asyncData:function(n){var e=n.params,data=t(380)("./".concat(e.date,"_").concat(e.slug,".json"));return{title:data.title,bodyHtml:data.bodyHtml,params:e}},head:function(){var title="".concat(this.title," - sorrowblue.com"),n="https://sorrowblue.com/blog/".concat(this.params.date,"/").concat(this.params.slug,"/");return{title:title,meta:[{hid:"og:url",property:"og:url",content:n},{hid:"og:type",property:"og:type",content:"article"},{hid:"og:image",property:"og:image",content:"https://sorrowblue.com/images/ogp/blog.png"},{hid:"og:title",property:"og:title",content:title},{hid:"og:site_name",property:"og:site_name",content:"sorrowblue.github.io"}],link:[{rel:"canonica",href:n}]}}},o=(t(384),t(45)),r=t(63),d=t.n(r),c=t(348),h=t(349),m=t(350),component=Object(o.a)(l,function(){var n=this.$createElement,e=this._self._c||n;return e("v-container",{attrs:{"grid-list-md":""}},[e("v-layout",{attrs:{row:"","justify-center":""}},[e("v-flex",{staticClass:"markdown",attrs:{xs12:"",sm11:"",md10:"",lg8:""},domProps:{innerHTML:this._s(this.bodyHtml)}})],1)],1)},[],!1,null,null,null);e.default=component.exports;d()(component,{VContainer:c.a,VFlex:h.a,VLayout:m.a})}}]);