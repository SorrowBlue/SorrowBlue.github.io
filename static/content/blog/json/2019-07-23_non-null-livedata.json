{
  "title": "NullチェックのいらないLiveData",
  "desc": "android-architecture-componentsのLiveDataでNullableにしない方法",
  "date": "2019/07/23",
  "tags": "Android Kotlin",
  "bodyContent": "### 下記のようなクラスを作成するだけ\n```kotlin\nclass MutableSafeLiveData<T : Any>(private val default: T) : MutableLiveData<T>(default) {\n\n\toverride fun getValue() = super.getValue() ?: default\n\n\tfun observe(owner: LifecycleOwner, observer: (T) -> Unit) =\n\t\tObserver<T>(observer::invoke).also { observe(owner, it) }\n\n\tfun observeForever(observer: (T) -> Unit) =\n\t\tObserver<T>(observer::invoke).also(::observeForever)\n\n\tfun observeWhen(owner: LifecycleOwner, value: T, observer: (T) -> Unit) =\n\t\tObserver<T> { if (it == value) observer(it) }.also { observe(owner, it) }\n}\n```\n\n### 使い方\n```kotlin\nfun Fragment.main() {\n\tval data: MutableSafeLiveData<String> = MutableSafeLiveData(\"abc\")\n\tval getData: String = data.value\n\tdata.value = null // ← error\n\tdata.observe(this) { it: String ->\n\t\tLog.d(\"main\", \"data=$it\")\n\t}\n\tdata.observeWhen(this, \"abc\") { it: String ->\n\t\t// dataが abc のときだけ\n\t\tLog.d(\"main\", \"data=$it\")\n\t}\n}\n```",
  "bodyHtml": "<h3>下記のようなクラスを作成するだけ</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MutableSafeLiveData</span>&lt;<span class=\"hljs-type\">T : Any</span>&gt;</span>(<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> <span class=\"hljs-keyword\">default</span>: T) : MutableLiveData&lt;T&gt;(<span class=\"hljs-keyword\">default</span>) {\n\n\t<span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span></span> = <span class=\"hljs-keyword\">super</span>.getValue() ?: <span class=\"hljs-keyword\">default</span>\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">observe</span><span class=\"hljs-params\">(owner: <span class=\"hljs-type\">LifecycleOwner</span>, observer: (<span class=\"hljs-type\">T</span>)</span></span> -&gt; <span class=\"hljs-built_in\">Unit</span>) =\n\t\tObserver&lt;T&gt;(observer::invoke).also { observe(owner, it) }\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">observeForever</span><span class=\"hljs-params\">(observer: (<span class=\"hljs-type\">T</span>)</span></span> -&gt; <span class=\"hljs-built_in\">Unit</span>) =\n\t\tObserver&lt;T&gt;(observer::invoke).also(::observeForever)\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">observeWhen</span><span class=\"hljs-params\">(owner: <span class=\"hljs-type\">LifecycleOwner</span>, value: <span class=\"hljs-type\">T</span>, observer: (<span class=\"hljs-type\">T</span>)</span></span> -&gt; <span class=\"hljs-built_in\">Unit</span>) =\n\t\tObserver&lt;T&gt; { <span class=\"hljs-keyword\">if</span> (it == value) observer(it) }.also { observe(owner, it) }\n}</code></pre><h3>使い方</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> Fragment.<span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">val</span> <span class=\"hljs-keyword\">data</span>: MutableSafeLiveData&lt;String&gt; = MutableSafeLiveData(<span class=\"hljs-string\">\"abc\"</span>)\n\t<span class=\"hljs-keyword\">val</span> getData: String = <span class=\"hljs-keyword\">data</span>.value\n\t<span class=\"hljs-keyword\">data</span>.value = <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// ← error</span>\n\t<span class=\"hljs-keyword\">data</span>.observe(<span class=\"hljs-keyword\">this</span>) { it: String -&gt;\n\t\tLog.d(<span class=\"hljs-string\">\"main\"</span>, <span class=\"hljs-string\">\"data=<span class=\"hljs-variable\">$it</span>\"</span>)\n\t}\n\t<span class=\"hljs-keyword\">data</span>.observeWhen(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"abc\"</span>) { it: String -&gt;\n\t\t<span class=\"hljs-comment\">// dataが abc のときだけ</span>\n\t\tLog.d(<span class=\"hljs-string\">\"main\"</span>, <span class=\"hljs-string\">\"data=<span class=\"hljs-variable\">$it</span>\"</span>)\n\t}\n}</code></pre>",
  "dir": "static/content/blog/json",
  "base": "2019-07-23_non-null-livedata.json",
  "ext": ".json",
  "sourceBase": "2019-07-23_non-null-livedata.md",
  "sourceExt": ".md"
}